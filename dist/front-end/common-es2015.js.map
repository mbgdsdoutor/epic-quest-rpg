{"version":3,"sources":["./src/app/authentication/services/user.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAA2C;;;AAM3C,MAAM,GAAG,GAAG,mCAAmC,CAAC;AAGzC,MAAM,WAAW;IACpB,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAI,CAAC;IAExC,QAAQ,CAAC,MAAc;QAC1B,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAO,GAAG,GAAG,YAAY,MAAM,EAAE,CAAC,CAAC;QAC7D,0DAA0D;QAC1D,iDAAiD;IACrD,CAAC;IAEM,OAAO;QACV,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAS,GAAG,GAAG,UAAU,CAAC,CAAC;QACrD,wBAAwB;IAC5B,CAAC;IAEM,SAAS,CAAC,IAAU;QACvB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAO,GAAG,GAAG,aAAa,EAAE,IAAI,CAAC,CAAC;IACjE,CAAC;IAEM,WAAW,CAAC,IAAU;QACzB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAO,GAAG,GAAG,eAAe,EAAE,IAAI,CAAC,CAAC;IACnE,CAAC;IAEM,UAAU;QACb,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAS,GAAG,GAAG,aAAa,CAAC,CAAC;QACxD,0DAA0D;QAC1D,iDAAiD;IACrD,CAAC;IAEM,UAAU,CAAC,IAAU;QACxB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAO,GAAG,GAAG,SAAS,EAAE,IAAI,CAAC;IAC3D,CAAC;;sEA9BQ,WAAW;8FAAX,WAAW,WAAX,WAAW;6FAAX,WAAW;cADvB,wDAAU","file":"common-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { User } from 'src/app/out-of-session/models/user';\nimport { usersMock } from 'src/app/utils/mocks';\n\nconst url = 'http://localhost:8085/api/v1/user';\n\n@Injectable()\nexport class UserService {\n    constructor(private httpClient: HttpClient) { }\n\n    public findById(userId: number): Observable<User> {\n        return this.httpClient.get<User>(`${url}/getById/${userId}`);\n        // const user = usersMock.filter(u => u.id === userId)[0];\n        // return of({ ...user, friendList: usersMock });\n    }\n\n    public findAll(): Observable<User[]> {\n        return this.httpClient.get<User[]>(`${url}/getAll/`);\n        // return of(usersMock);\n    }\n\n    public addFriend(user: User): Observable<void> {\n        return this.httpClient.post<void>(`${url}/addFriend/`, user);\n    }\n\n    public aceptFriend(user: User): Observable<void> {\n        return this.httpClient.post<void>(`${url}/aceptInvite/`, user);\n    }\n\n    public getFriends(): Observable<User[]> {\n        return this.httpClient.get<User[]>(`${url}/getFriends`);\n        // const user = usersMock.filter(u => u.id === userId)[0];\n        // return of({ ...user, friendList: usersMock });\n    }\n\n    public updateUser(user: User): Observable<User> {\n        return this.httpClient.put<User>(`${url}/update`, user)\n    }\n}\n"],"sourceRoot":"webpack:///"}
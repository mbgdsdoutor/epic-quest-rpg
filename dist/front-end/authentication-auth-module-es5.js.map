{"version":3,"sources":["webpack:///src/app/authentication/auth.component.ts","webpack:///src/app/authentication/auth.component.html","webpack:///src/app/authentication/auth.module.ts","webpack:///src/app/authentication/auth.routing.module.ts","webpack:///src/app/authentication/auth.service.ts","webpack:///src/app/authentication/forgot-password/forgot-password.component.ts","webpack:///src/app/authentication/forgot-password/forgot-password.component.html","webpack:///src/app/authentication/login/login.component.ts","webpack:///src/app/authentication/login/login.component.html","webpack:///src/app/authentication/register/register.component.ts","webpack:///src/app/authentication/register/register.component.html","webpack:///src/app/utils/validators.ts"],"names":["AuthComponent","selector","templateUrl","AuthModule","imports","declarations","providers","LOGIN","path","component","REGISTER","FORGOT_PASSWORD","authRoutes","children","pathMatch","redirectTo","AuthRoutingModule","forChild","exports","url","AuthService","http","tokenService","router","credentials","ret","username","password","post","user","signOut","navigateByUrl","ForgotPasswordComponent","formBuilder","tokenStorageService","authService","configurarForm","isLogged","email","control","required","form","group","LoginComponent","loadingService","alertService","startLoadingBar","value","authenticate","subscribe","data","token","saveToken","saveUser","stopLoadingBar","err","error","login","RegisterComponent","messageService","fullName","EMAIL","userName","description","confirmPassword","matchValues","photoUrl","response","success","console","log","matchTo","parent","controls","isMatching","salvarUsuario","styleUrls","EpicValidators","match","hora"],"mappings":"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","file":"authentication-auth-module-es5.js","sourcesContent":["import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-auth',\r\n  templateUrl: './auth.component.html'\r\n})\r\nexport class AuthComponent {\r\n\r\n  constructor() { }\r\n\r\n}\r\n","<router-outlet></router-outlet>","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AuthRoutingModule } from './auth.routing.module';\r\nimport { AuthComponent } from './auth.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { Interceptor } from '../interceptor';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { AuthService } from './auth.service';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { UserService } from './services/user.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    AuthRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    AuthComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    ForgotPasswordComponent\r\n  ],\r\n  providers: [\r\n    AuthService,\r\n    UserService,\r\n    // { provide: HTTP_INTERCEPTORS, useClass: Interceptor, multi: true }\r\n  ]\r\n})\r\nexport class AuthModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Route, RouterModule, Routes } from '@angular/router';\r\nimport { AuthComponent } from './auth.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { RegisterComponent } from './register/register.component';\r\n\r\nconst LOGIN: Route = {\r\n  path: 'login',\r\n  component: LoginComponent\r\n};\r\n\r\nconst REGISTER: Route = {\r\n  path: 'register',\r\n  component: RegisterComponent\r\n};\r\n\r\nconst FORGOT_PASSWORD: Route = {\r\n  path: 'password',\r\n  component: ForgotPasswordComponent\r\n};\r\n\r\nexport const authRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AuthComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        pathMatch: 'full',\r\n        redirectTo: 'home'\r\n      },\r\n      LOGIN,\r\n      REGISTER,\r\n      FORGOT_PASSWORD\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forChild(authRoutes),\r\n    HttpClientModule,\r\n    FormsModule,\r\n    CommonModule\r\n  ],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class AuthRoutingModule { }\r\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { User } from '../out-of-session/models/user';\nimport { TokenStorageService } from '../token-storage.service';\nimport { Credentials } from './models/credentials';\n\nconst url = 'http://localhost:8085/api/v1/auth';\n\n@Injectable()\nexport class AuthService {\n\n  constructor(\n    private http: HttpClient,\n    private tokenService: TokenStorageService,\n    private router: Router\n  ) { }\n\n  authenticate(credentials: Credentials): Observable<any> {\n    const ret = {\n      username: credentials.username,\n      password: credentials.password,\n    };\n    return this.http.post(`${url}/login`, ret);\n  }\n\n  saveUser(user: User): Observable<User> {\n    return this.http.post<User>(`${url}/register/`, user);\n  }\n\n  logout() {\n    this.tokenService.signOut();\n    this.router.navigateByUrl('/auth/login');\n  }\n}\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { TokenStorageService } from 'src/app/token-storage.service';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../auth.service';\r\n\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.component.html'\r\n})\r\n\r\nexport class ForgotPasswordComponent implements OnInit {\r\n\r\n  public form: FormGroup;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private tokenStorageService: TokenStorageService,\r\n    private router: Router,\r\n    private authService: AuthService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.configurarForm();\r\n    if (this.tokenStorageService.isLogged()) {\r\n      this.router.navigateByUrl('/home');\r\n    }\r\n  }\r\n\r\n  configurarForm() {\r\n    const email = this.formBuilder.control(null, [Validators.required]);\r\n    this.form = this.formBuilder.group({\r\n      email,\r\n    });\r\n  }\r\n}\r\n","<form class=\"auth-form-container\" [formGroup]=\"form\">\n  <img alt=\"epic-quest-logo\" src=\"assets/images/epicquest.png\" />\n  <div class=\"auth-form\">\n    <p>Enviaremos um link para redefinição da sua \n      senha para o e-mail fornecido.</p>\n    <div class=\"field\">\n      <label for=\"username\">E-mail</label>\n      <input class=\"input\" placeholder=\"digite seu email cadastrado\" id=\"email\" formControlName=\"email\">\n    </div>\n    <div class=\"auth-form-actions\">\n      <button class=\"button--link\" [routerLink]=\"['/auth/login/']\">Voltar para login</button>\n      <button class=\"button--primary\">Enviar</button>\n    </div>\n  </div>\n</form>","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AlertService } from 'src/app/shared/alert.service';\r\nimport { LoadingService } from 'src/app/shared/loading/loading.service';\r\nimport { TokenStorageService } from 'src/app/token-storage.service';\r\nimport { AuthService } from '../auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html'\r\n})\r\n\r\nexport class LoginComponent implements OnInit {\r\n  public form: FormGroup;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private tokenStorageService: TokenStorageService,\r\n    private router: Router,\r\n    private loadingService: LoadingService,\r\n    private alertService: AlertService,\r\n    private authService: AuthService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.configurarForm();\r\n    if (this.tokenStorageService.isLogged()) {\r\n      this.router.navigateByUrl('/social/explore');\r\n    }\r\n  }\r\n\r\n  configurarForm() {\r\n    const username = this.formBuilder.control(null, [Validators.required]);\r\n    const password = this.formBuilder.control(null, [Validators.required]);\r\n    this.form = this.formBuilder.group({\r\n      username,\r\n      password\r\n    });\r\n  }\r\n\r\n  login(): void {\r\n    this.loadingService.startLoadingBar();\r\n    const credentials = this.form.value;\r\n    this.authService.authenticate(credentials).subscribe(\r\n      (data) => {\r\n        if (data && data.token) {\r\n          this.tokenStorageService.saveToken('Bearer ' + data.token);\r\n          this.tokenStorageService.saveUser(data.user);\r\n          this.loadingService.stopLoadingBar();\r\n          this.router.navigateByUrl('/social/explore');\r\n        }\r\n      },\r\n      (err) => {\r\n        this.loadingService.stopLoadingBar();\r\n        this.alertService.error('Credenciais Invalidas.')\r\n      });\r\n  }\r\n}\r\n","<form class=\"auth-form-container\" [formGroup]=\"form\">\r\n  <img alt=\"epic-quest-logo\" src=\"assets/images/epicquest.png\" />\r\n  <div class=\"auth-form\">\r\n    <div\r\n      class=\"field\"\r\n      [ngClass]=\"{\r\n        error: form.get('username').errors && form.get('username').touched\r\n      }\"\r\n    >\r\n      <label for=\"username\">Login</label>\r\n      <input\r\n        class=\"input\"\r\n        placeholder=\"seu e-mail ou nome de usuário\"\r\n        id=\"username\"\r\n        #username\r\n        formControlName=\"username\"\r\n      />\r\n      <div\r\n        *ngIf=\"\r\n          form.get('username').errors && form.get('username').errors.required\r\n        \"\r\n      >\r\n        <small>campo obrigatório.</small>\r\n      </div>\r\n    </div>\r\n    <div\r\n      class=\"field\"\r\n      [ngClass]=\"{\r\n        error: form.get('password').errors && form.get('password').touched\r\n      }\"\r\n    >\r\n      <label for=\"password\">Senha</label>\r\n      <input\r\n        class=\"input\"\r\n        placeholder=\"sua senha\"\r\n        type=\"password\"\r\n        id=\"password\"\r\n        formControlName=\"password\"\r\n      />\r\n      <div\r\n        *ngIf=\"\r\n          form.get('password').errors && form.get('password').errors.required\r\n        \"\r\n      >\r\n        <small>campo obrigatório.</small>\r\n      </div>\r\n    </div>\r\n    <button class=\"button--primary full\" (click)=\"login()\">Entrar</button>\r\n    <div class=\"auth-form-actions\">\r\n      <button class=\"button--link\" [routerLink]=\"['/auth/password/']\">\r\n        Esqueceu sua senha?\r\n      </button>\r\n      <button class=\"button--primary\" [routerLink]=\"['/auth/register/']\">\r\n        Criar Conta\r\n      </button>\r\n    </div>\r\n  </div>\r\n</form>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, ValidationErrors, AbstractControl } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { TokenStorageService } from 'src/app/token-storage.service';\r\nimport { EpicValidators } from 'src/app/utils/validators';\r\nimport { UserService } from '../services/user.service';\r\nimport { User } from 'src/app/out-of-session/models/user';\r\nimport { AlertService } from 'src/app/shared/alert.service';\r\nimport { LoadingService } from 'src/app/shared/loading/loading.service';\r\nimport { AuthService } from '../auth.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\n\r\nexport class RegisterComponent implements OnInit {\r\n  public form: FormGroup;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private loadingService: LoadingService,\r\n    private messageService: AlertService,\r\n    private tokenStorageService: TokenStorageService,\r\n    private router: Router,\r\n    private authService: AuthService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.configurarForm();\r\n    if (this.tokenStorageService.isLogged()) {\r\n      this.router.navigateByUrl('/home');\r\n    }\r\n  }\r\n\r\n  configurarForm() {\r\n    const fullName = this.formBuilder.control(null, [Validators.required]);\r\n    const email = this.formBuilder.control(null, [Validators.required, EpicValidators.EMAIL]);\r\n    const userName = this.formBuilder.control(null, [Validators.required]);\r\n    const description = this.formBuilder.control(null, [Validators.required]);\r\n    const password = this.formBuilder.control(null, [Validators.required]);\r\n    const confirmPassword = this.formBuilder.control(null, [Validators.required, this.matchValues('password')]);\r\n    const photoUrl = this.formBuilder.control(null, []);\r\n    this.form = this.formBuilder.group({\r\n      fullName,\r\n      email,\r\n      userName,\r\n      description,\r\n      password,\r\n      confirmPassword,\r\n      photoUrl\r\n    });\r\n  }\r\n\r\n  salvarUsuario() {\r\n    const user = this.form.value as User;\r\n    this.loadingService.startLoadingBar();\r\n    this.authService.saveUser(user).subscribe(response => {\r\n      this.loadingService.stopLoadingBar();\r\n      this.messageService.success('Usuário registrado.');\r\n      console.log('USUARIO SALVO COM SUCESSO!', response);\r\n      this.router.navigateByUrl('/auth/login');\r\n    }, (err) => {\r\n      this.loadingService.stopLoadingBar();\r\n      this.messageService.error('Erro ao salvar usuário.');\r\n    });\r\n  }\r\n\r\n  public matchValues(\r\n    matchTo: string // name of the control to match to\r\n  ): (AbstractControl) => ValidationErrors | null {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      return !!control.parent &&\r\n        !!control.parent.value &&\r\n        control.value === control.parent.controls[matchTo].value\r\n        ? null\r\n        : { isMatching: true };\r\n    };\r\n  }\r\n}\r\n","<form class=\"auth-form-container\" [formGroup]=\"form\">\r\n  <div class=\"register-form-header\">\r\n    <h3>Criar uma nova conta</h3>\r\n  </div>\r\n  <div class=\"auth-form\">\r\n    <div class=\"field\" [ngClass]=\"{'error': form.get('fullName').errors && form.get('fullName').touched}\">\r\n      <label for=\"fullName\">Nome Completo</label>\r\n      <input class=\"input\" placeholder=\"seu nome completo\" id=\"fullName\" formControlName=\"fullName\">\r\n      <div *ngIf=\"form.get('fullName').errors && form.get('fullName').errors.required\">\r\n        <small>campo obrigatório.</small>\r\n      </div>\r\n    </div>\r\n    <div class=\"field\" [ngClass]=\"{'error': form.get('email').errors && form.get('email').touched}\">\r\n      <label for=\"email\">E-mail</label>\r\n      <input class=\"input\" placeholder=\"seu email\" id=\"email\" formControlName=\"email\">\r\n      <div *ngIf=\"form.get('email').errors && form.get('email').errors.required\">\r\n        <small>campo obrigatório.</small>\r\n      </div>\r\n      <div *ngIf=\"form.get('email').errors && form.get('email').errors.email\">\r\n        <small>email inválido.</small>\r\n      </div>\r\n    </div>\r\n    <div class=\"field\" [ngClass]=\"{'error': form.get('userName').errors && form.get('userName').touched}\">\r\n      <label for=\"userName\">Nome de Usuário</label>\r\n      <input class=\"input\" placeholder=\"seu nome de usuário (nick)\" id=\"userName\" formControlName=\"userName\">\r\n      <div *ngIf=\"form.get('userName').errors && form.get('userName').errors.required\">\r\n        <small>campo obrigatório.</small>\r\n      </div>\r\n    </div>\r\n    <div class=\"field\" [ngClass]=\"{'error': form.get('description').errors && form.get('description').touched}\">\r\n      <label for=\"description\">Descrição</label>\r\n      <input class=\"input\" placeholder=\"fale um pouco sobre você\" id=\"description\" formControlName=\"description\">\r\n      <div *ngIf=\"form.get('description').errors && form.get('description').errors.required\">\r\n        <small>campo obrigatório.</small>\r\n      </div>\r\n    </div>\r\n    <div class=\"field\" [ngClass]=\"{'error': form.get('photoUrl').errors && form.get('photoUrl').touched}\">\r\n      <label for=\"photoUrl\">Foto</label>\r\n      <input class=\"input\" placeholder=\"url da foto\" id=\"photoUrl\" formControlName=\"photoUrl\">\r\n    </div>\r\n    <div class=\"field\" [ngClass]=\"{'error': form.get('password').errors && form.get('password').touched}\">\r\n      <label for=\"password\">Senha</label>\r\n      <input class=\"input\" placeholder=\"digite sua senha\" type=\"password\" id=\"password\" formControlName=\"password\">\r\n      <div *ngIf=\"form.get('password').errors && form.get('password').errors.required\">\r\n        <small>campo obrigatório.</small>\r\n      </div>\r\n    </div>\r\n    <div class=\"field\" [ngClass]=\"{'error': form.get('confirmPassword').errors && form.get('confirmPassword').touched}\">\r\n      <label for=\"confirmPassword\">Confirmar Senha</label>\r\n      <input class=\"input\" placeholder=\"confirme sua senha\" type=\"password\" id=\"confirmPassword\" formControlName=\"confirmPassword\">\r\n      <div *ngIf=\"form.get('confirmPassword').errors && form.get('confirmPassword').errors.required\">\r\n        <small>campo obrigatório.</small>\r\n      </div>\r\n      <div *ngIf=\"form.get('confirmPassword').errors && form.get('confirmPassword').errors.isMatching\">\r\n        <small>as senhas devem coincidir.</small>\r\n      </div>\r\n    </div>\r\n    <div class=\"auth-form-actions\">\r\n      <button class=\"button--link\" [routerLink]=\"['/auth/login/']\">Já é cadastrado?</button>\r\n      <button class=\"button--primary\" [disabled]=\"form.invalid || form.pristine\" (click)=\"salvarUsuario()\">Registrar</button>\r\n    </div>\r\n  </div>\r\n</form>","import { AbstractControl } from '@angular/forms';\n\nexport class EpicValidators {\n\n  static get EMAIL() {\n    return (control: AbstractControl) => {\n      if (control.value && !control.value.match(/\\S+@\\S+\\.\\S+/)) {\n        return { email: true };\n      }\n      return null;\n    };\n  }\n  static get HORA() {\n    return (control: AbstractControl) => {\n      if (control.value && !control.value.match(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/)) {\n        return { hora: true };\n      }\n      return null;\n    };\n  }\n}\n"]}
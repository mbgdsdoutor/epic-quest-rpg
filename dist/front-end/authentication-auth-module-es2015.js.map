{"version":3,"sources":["./src/app/authentication/auth.component.ts","./src/app/authentication/auth.component.html","./src/app/authentication/auth.module.ts","./src/app/authentication/auth.routing.module.ts","./src/app/authentication/auth.service.ts","./src/app/authentication/forgot-password/forgot-password.component.ts","./src/app/authentication/forgot-password/forgot-password.component.html","./src/app/authentication/login/login.component.ts","./src/app/authentication/login/login.component.html","./src/app/authentication/register/register.component.ts","./src/app/authentication/register/register.component.html","./src/app/utils/validators.ts"],"names":[],"mappings":"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","file":"authentication-auth-module-es2015.js","sourcesContent":["import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-auth',\r\n  templateUrl: './auth.component.html'\r\n})\r\nexport class AuthComponent {\r\n\r\n  constructor() { }\r\n\r\n}\r\n","<router-outlet></router-outlet>","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AuthRoutingModule } from './auth.routing.module';\r\nimport { AuthComponent } from './auth.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { Interceptor } from '../interceptor';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { AuthService } from './auth.service';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { UserService } from './services/user.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    AuthRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    AuthComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    ForgotPasswordComponent\r\n  ],\r\n  providers: [\r\n    AuthService,\r\n    UserService,\r\n    // { provide: HTTP_INTERCEPTORS, useClass: Interceptor, multi: true }\r\n  ]\r\n})\r\nexport class AuthModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Route, RouterModule, Routes } from '@angular/router';\r\nimport { AuthComponent } from './auth.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { RegisterComponent } from './register/register.component';\r\n\r\nconst LOGIN: Route = {\r\n  path: 'login',\r\n  component: LoginComponent\r\n};\r\n\r\nconst REGISTER: Route = {\r\n  path: 'register',\r\n  component: RegisterComponent\r\n};\r\n\r\nconst FORGOT_PASSWORD: Route = {\r\n  path: 'password',\r\n  component: ForgotPasswordComponent\r\n};\r\n\r\nexport const authRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AuthComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        pathMatch: 'full',\r\n        redirectTo: 'home'\r\n      },\r\n      LOGIN,\r\n      REGISTER,\r\n      FORGOT_PASSWORD\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forChild(authRoutes),\r\n    HttpClientModule,\r\n    FormsModule,\r\n    CommonModule\r\n  ],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class AuthRoutingModule { }\r\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { User } from '../out-of-session/models/user';\nimport { TokenStorageService } from '../token-storage.service';\nimport { Credentials } from './models/credentials';\n\nconst url = 'http://localhost:8085/api/v1/auth';\n\n@Injectable()\nexport class AuthService {\n\n  constructor(\n    private http: HttpClient,\n    private tokenService: TokenStorageService,\n    private router: Router\n  ) { }\n\n  authenticate(credentials: Credentials): Observable<any> {\n    const ret = {\n      username: credentials.username,\n      password: credentials.password,\n    };\n    return this.http.post(`${url}/login`, ret);\n  }\n\n  saveUser(user: User): Observable<User> {\n    return this.http.post<User>(`${url}/register/`, user);\n  }\n\n  logout() {\n    this.tokenService.signOut();\n    this.router.navigateByUrl('/auth/login');\n  }\n}\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { TokenStorageService } from 'src/app/token-storage.service';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../auth.service';\r\n\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.component.html'\r\n})\r\n\r\nexport class ForgotPasswordComponent implements OnInit {\r\n\r\n  public form: FormGroup;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private tokenStorageService: TokenStorageService,\r\n    private router: Router,\r\n    private authService: AuthService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.configurarForm();\r\n    if (this.tokenStorageService.isLogged()) {\r\n      this.router.navigateByUrl('/home');\r\n    }\r\n  }\r\n\r\n  configurarForm() {\r\n    const email = this.formBuilder.control(null, [Validators.required]);\r\n    this.form = this.formBuilder.group({\r\n      email,\r\n    });\r\n  }\r\n}\r\n","<form class=\"auth-form-container\" [formGroup]=\"form\">\n  <img alt=\"epic-quest-logo\" src=\"assets/images/epicquest.png\" />\n  <div class=\"auth-form\">\n    <p>Enviaremos um link para redefinição da sua \n      senha para o e-mail fornecido.</p>\n    <div class=\"field\">\n      <label for=\"username\">E-mail</label>\n      <input class=\"input\" placeholder=\"digite seu email cadastrado\" id=\"email\" formControlName=\"email\">\n    </div>\n    <div class=\"auth-form-actions\">\n      <button class=\"button--link\" [routerLink]=\"['/auth/login/']\">Voltar para login</button>\n      <button class=\"button--primary\">Enviar</button>\n    </div>\n  </div>\n</form>","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AlertService } from 'src/app/shared/alert.service';\r\nimport { LoadingService } from 'src/app/shared/loading/loading.service';\r\nimport { TokenStorageService } from 'src/app/token-storage.service';\r\nimport { AuthService } from '../auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html'\r\n})\r\n\r\nexport class LoginComponent implements OnInit {\r\n  public form: FormGroup;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private tokenStorageService: TokenStorageService,\r\n    private router: Router,\r\n    private loadingService: LoadingService,\r\n    private alertService: AlertService,\r\n    private authService: AuthService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.configurarForm();\r\n    if (this.tokenStorageService.isLogged()) {\r\n      this.router.navigateByUrl('/social/explore');\r\n    }\r\n  }\r\n\r\n  configurarForm() {\r\n    const username = this.formBuilder.control(null, [Validators.required]);\r\n    const password = this.formBuilder.control(null, [Validators.required]);\r\n    this.form = this.formBuilder.group({\r\n      username,\r\n      password\r\n    });\r\n  }\r\n\r\n  login(): void {\r\n    this.loadingService.startLoadingBar();\r\n    const credentials = this.form.value;\r\n    this.authService.authenticate(credentials).subscribe(\r\n      (data) => {\r\n        if (data && data.token) {\r\n          this.tokenStorageService.saveToken('Bearer ' + data.token);\r\n          this.tokenStorageService.saveUser(data.user);\r\n          this.loadingService.stopLoadingBar();\r\n          this.router.navigateByUrl('/social/explore');\r\n        }\r\n      },\r\n      (err) => {\r\n        this.loadingService.stopLoadingBar();\r\n        this.alertService.error('Credenciais Invalidas.')\r\n      });\r\n  }\r\n}\r\n","<form class=\"auth-form-container\" [formGroup]=\"form\">\r\n  <img alt=\"epic-quest-logo\" src=\"assets/images/epicquest.png\" />\r\n  <div class=\"auth-form\">\r\n    <div\r\n      class=\"field\"\r\n      [ngClass]=\"{\r\n        error: form.get('username').errors && form.get('username').touched\r\n      }\"\r\n    >\r\n      <label for=\"username\">Login</label>\r\n      <input\r\n        class=\"input\"\r\n        placeholder=\"seu e-mail ou nome de usuário\"\r\n        id=\"username\"\r\n        #username\r\n        formControlName=\"username\"\r\n      />\r\n      <div\r\n        *ngIf=\"\r\n          form.get('username').errors && form.get('username').errors.required\r\n        \"\r\n      >\r\n        <small>campo obrigatório.</small>\r\n      </div>\r\n    </div>\r\n    <div\r\n      class=\"field\"\r\n      [ngClass]=\"{\r\n        error: form.get('password').errors && form.get('password').touched\r\n      }\"\r\n    >\r\n      <label for=\"password\">Senha</label>\r\n      <input\r\n        class=\"input\"\r\n        placeholder=\"sua senha\"\r\n        type=\"password\"\r\n        id=\"password\"\r\n        formControlName=\"password\"\r\n      />\r\n      <div\r\n        *ngIf=\"\r\n          form.get('password').errors && form.get('password').errors.required\r\n        \"\r\n      >\r\n        <small>campo obrigatório.</small>\r\n      </div>\r\n    </div>\r\n    <button class=\"button--primary full\" (click)=\"login()\">Entrar</button>\r\n    <div class=\"auth-form-actions\">\r\n      <button class=\"button--link\" [routerLink]=\"['/auth/password/']\">\r\n        Esqueceu sua senha?\r\n      </button>\r\n      <button class=\"button--primary\" [routerLink]=\"['/auth/register/']\">\r\n        Criar Conta\r\n      </button>\r\n    </div>\r\n  </div>\r\n</form>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, ValidationErrors, AbstractControl } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { TokenStorageService } from 'src/app/token-storage.service';\r\nimport { EpicValidators } from 'src/app/utils/validators';\r\nimport { UserService } from '../services/user.service';\r\nimport { User } from 'src/app/out-of-session/models/user';\r\nimport { AlertService } from 'src/app/shared/alert.service';\r\nimport { LoadingService } from 'src/app/shared/loading/loading.service';\r\nimport { AuthService } from '../auth.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\n\r\nexport class RegisterComponent implements OnInit {\r\n  public form: FormGroup;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private loadingService: LoadingService,\r\n    private messageService: AlertService,\r\n    private tokenStorageService: TokenStorageService,\r\n    private router: Router,\r\n    private authService: AuthService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.configurarForm();\r\n    if (this.tokenStorageService.isLogged()) {\r\n      this.router.navigateByUrl('/home');\r\n    }\r\n  }\r\n\r\n  configurarForm() {\r\n    const fullName = this.formBuilder.control(null, [Validators.required]);\r\n    const email = this.formBuilder.control(null, [Validators.required, EpicValidators.EMAIL]);\r\n    const userName = this.formBuilder.control(null, [Validators.required]);\r\n    const description = this.formBuilder.control(null, [Validators.required]);\r\n    const password = this.formBuilder.control(null, [Validators.required]);\r\n    const confirmPassword = this.formBuilder.control(null, [Validators.required, this.matchValues('password')]);\r\n    const photoUrl = this.formBuilder.control(null, []);\r\n    this.form = this.formBuilder.group({\r\n      fullName,\r\n      email,\r\n      userName,\r\n      description,\r\n      password,\r\n      confirmPassword,\r\n      photoUrl\r\n    });\r\n  }\r\n\r\n  salvarUsuario() {\r\n    const user = this.form.value as User;\r\n    this.loadingService.startLoadingBar();\r\n    this.authService.saveUser(user).subscribe(response => {\r\n      this.loadingService.stopLoadingBar();\r\n      this.messageService.success('Usuário registrado.');\r\n      console.log('USUARIO SALVO COM SUCESSO!', response);\r\n      this.router.navigateByUrl('/auth/login');\r\n    }, (err) => {\r\n      this.loadingService.stopLoadingBar();\r\n      this.messageService.error('Erro ao salvar usuário.');\r\n    });\r\n  }\r\n\r\n  public matchValues(\r\n    matchTo: string // name of the control to match to\r\n  ): (AbstractControl) => ValidationErrors | null {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      return !!control.parent &&\r\n        !!control.parent.value &&\r\n        control.value === control.parent.controls[matchTo].value\r\n        ? null\r\n        : { isMatching: true };\r\n    };\r\n  }\r\n}\r\n","<form class=\"auth-form-container\" [formGroup]=\"form\">\r\n  <div class=\"register-form-header\">\r\n    <h3>Criar uma nova conta</h3>\r\n  </div>\r\n  <div class=\"auth-form\">\r\n    <div class=\"field\" [ngClass]=\"{'error': form.get('fullName').errors && form.get('fullName').touched}\">\r\n      <label for=\"fullName\">Nome Completo</label>\r\n      <input class=\"input\" placeholder=\"seu nome completo\" id=\"fullName\" formControlName=\"fullName\">\r\n      <div *ngIf=\"form.get('fullName').errors && form.get('fullName').errors.required\">\r\n        <small>campo obrigatório.</small>\r\n      </div>\r\n    </div>\r\n    <div class=\"field\" [ngClass]=\"{'error': form.get('email').errors && form.get('email').touched}\">\r\n      <label for=\"email\">E-mail</label>\r\n      <input class=\"input\" placeholder=\"seu email\" id=\"email\" formControlName=\"email\">\r\n      <div *ngIf=\"form.get('email').errors && form.get('email').errors.required\">\r\n        <small>campo obrigatório.</small>\r\n      </div>\r\n      <div *ngIf=\"form.get('email').errors && form.get('email').errors.email\">\r\n        <small>email inválido.</small>\r\n      </div>\r\n    </div>\r\n    <div class=\"field\" [ngClass]=\"{'error': form.get('userName').errors && form.get('userName').touched}\">\r\n      <label for=\"userName\">Nome de Usuário</label>\r\n      <input class=\"input\" placeholder=\"seu nome de usuário (nick)\" id=\"userName\" formControlName=\"userName\">\r\n      <div *ngIf=\"form.get('userName').errors && form.get('userName').errors.required\">\r\n        <small>campo obrigatório.</small>\r\n      </div>\r\n    </div>\r\n    <div class=\"field\" [ngClass]=\"{'error': form.get('description').errors && form.get('description').touched}\">\r\n      <label for=\"description\">Descrição</label>\r\n      <input class=\"input\" placeholder=\"fale um pouco sobre você\" id=\"description\" formControlName=\"description\">\r\n      <div *ngIf=\"form.get('description').errors && form.get('description').errors.required\">\r\n        <small>campo obrigatório.</small>\r\n      </div>\r\n    </div>\r\n    <div class=\"field\" [ngClass]=\"{'error': form.get('photoUrl').errors && form.get('photoUrl').touched}\">\r\n      <label for=\"photoUrl\">Foto</label>\r\n      <input class=\"input\" placeholder=\"url da foto\" id=\"photoUrl\" formControlName=\"photoUrl\">\r\n    </div>\r\n    <div class=\"field\" [ngClass]=\"{'error': form.get('password').errors && form.get('password').touched}\">\r\n      <label for=\"password\">Senha</label>\r\n      <input class=\"input\" placeholder=\"digite sua senha\" type=\"password\" id=\"password\" formControlName=\"password\">\r\n      <div *ngIf=\"form.get('password').errors && form.get('password').errors.required\">\r\n        <small>campo obrigatório.</small>\r\n      </div>\r\n    </div>\r\n    <div class=\"field\" [ngClass]=\"{'error': form.get('confirmPassword').errors && form.get('confirmPassword').touched}\">\r\n      <label for=\"confirmPassword\">Confirmar Senha</label>\r\n      <input class=\"input\" placeholder=\"confirme sua senha\" type=\"password\" id=\"confirmPassword\" formControlName=\"confirmPassword\">\r\n      <div *ngIf=\"form.get('confirmPassword').errors && form.get('confirmPassword').errors.required\">\r\n        <small>campo obrigatório.</small>\r\n      </div>\r\n      <div *ngIf=\"form.get('confirmPassword').errors && form.get('confirmPassword').errors.isMatching\">\r\n        <small>as senhas devem coincidir.</small>\r\n      </div>\r\n    </div>\r\n    <div class=\"auth-form-actions\">\r\n      <button class=\"button--link\" [routerLink]=\"['/auth/login/']\">Já é cadastrado?</button>\r\n      <button class=\"button--primary\" [disabled]=\"form.invalid || form.pristine\" (click)=\"salvarUsuario()\">Registrar</button>\r\n    </div>\r\n  </div>\r\n</form>","import { AbstractControl } from '@angular/forms';\n\nexport class EpicValidators {\n\n  static get EMAIL() {\n    return (control: AbstractControl) => {\n      if (control.value && !control.value.match(/\\S+@\\S+\\.\\S+/)) {\n        return { email: true };\n      }\n      return null;\n    };\n  }\n  static get HORA() {\n    return (control: AbstractControl) => {\n      if (control.value && !control.value.match(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/)) {\n        return { hora: true };\n      }\n      return null;\n    };\n  }\n}\n"],"sourceRoot":"webpack:///"}
{"version":3,"sources":["webpack:///src/app/authentication/services/user.service.ts"],"names":["url","UserService","httpClient","userId","get","user","post","put"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAMA,GAAG,GAAG,mCAAZ;;QAGaC,W;AACT,2BAAoBC,UAApB,EAA4C;AAAA;;AAAxB,aAAAA,UAAA,GAAAA,UAAA;AAA2B;;;;iCAE/BC,M,EAAc;AAC1B,iBAAO,KAAKD,UAAL,CAAgBE,GAAhB,WAA6BJ,GAA7B,sBAA4CG,MAA5C,EAAP,CAD0B,CAE1B;AACA;AACH;;;kCAEa;AACV,iBAAO,KAAKD,UAAL,CAAgBE,GAAhB,WAA+BJ,GAA/B,cAAP,CADU,CAEV;AACH;;;kCAEgBK,I,EAAU;AACvB,iBAAO,KAAKH,UAAL,CAAgBI,IAAhB,WAA8BN,GAA9B,kBAAgDK,IAAhD,CAAP;AACH;;;oCAEkBA,I,EAAU;AACzB,iBAAO,KAAKH,UAAL,CAAgBI,IAAhB,WAA8BN,GAA9B,oBAAkDK,IAAlD,CAAP;AACH;;;qCAEgB;AACb,iBAAO,KAAKH,UAAL,CAAgBE,GAAhB,WAA+BJ,GAA/B,iBAAP,CADa,CAEb;AACA;AACH;;;mCAEiBK,I,EAAU;AACxB,iBAAO,KAAKH,UAAL,CAAgBK,GAAhB,WAA6BP,GAA7B,cAA2CK,IAA3C,CAAP;AACH;;;;;;;uBA9BQJ,W,EAAW,uH;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW;;;;;sEAAXA,W,EAAW;cADvB;AACuB,Q","file":"common-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { User } from 'src/app/out-of-session/models/user';\nimport { usersMock } from 'src/app/utils/mocks';\n\nconst url = 'http://localhost:8085/api/v1/user';\n\n@Injectable()\nexport class UserService {\n    constructor(private httpClient: HttpClient) { }\n\n    public findById(userId: number): Observable<User> {\n        return this.httpClient.get<User>(`${url}/getById/${userId}`);\n        // const user = usersMock.filter(u => u.id === userId)[0];\n        // return of({ ...user, friendList: usersMock });\n    }\n\n    public findAll(): Observable<User[]> {\n        return this.httpClient.get<User[]>(`${url}/getAll/`);\n        // return of(usersMock);\n    }\n\n    public addFriend(user: User): Observable<void> {\n        return this.httpClient.post<void>(`${url}/addFriend/`, user);\n    }\n\n    public aceptFriend(user: User): Observable<void> {\n        return this.httpClient.post<void>(`${url}/aceptInvite/`, user);\n    }\n\n    public getFriends(): Observable<User[]> {\n        return this.httpClient.get<User[]>(`${url}/getFriends`);\n        // const user = usersMock.filter(u => u.id === userId)[0];\n        // return of({ ...user, friendList: usersMock });\n    }\n\n    public updateUser(user: User): Observable<User> {\n        return this.httpClient.put<User>(`${url}/update`, user)\n    }\n}\n"]}